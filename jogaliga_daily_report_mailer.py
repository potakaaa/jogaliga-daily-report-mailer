import yagmail, datetime, os, dotenv


class DailyReportMailer:
    def __init__(self, repo: str, sender: str, receiver: str, app_password: str):
        self.repo = repo
        self.sender = sender
        self.receiver = receiver
        self.app_password = app_password
        self.today = datetime.date.today().strftime('%B %d, %Y')
        self.developer = []
        
        # Frontend has only one developer (Gerald). Backend has two developers (Gerald & Hans).
        if repo == "frontend":
            self.developer.append(os.getenv("DEV1_NAME_FRONTEND"))  # Gerald
        elif repo == "backend":
            self.developer.append(os.getenv("DEV1_NAME_BACKEND"))  # Gerald
            self.developer.append(os.getenv("DEV2_NAME_BACKEND"))  # Hans
        else:
            raise ValueError("Invalid repo")

    def format_bullet_points(self, text: str) -> str:
        """Convert a block of text into HTML bullet points."""
        # Split the text into lines and filter out empty lines
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        # Convert each line into a bullet point
        bullet_points = [f"â€¢ {line}" for line in lines]
        # Join with line breaks
        return "<br>".join(bullet_points)

    def send_report(self, dev1_accomplishments: str = "", dev2_accomplishments: str = "",
                   dev1_plans: str = "", dev2_plans: str = "",
                   dev1_blockers: str = "", dev2_blockers: str = "",
                   dev1_notes: str = "", dev2_notes: str = ""):
        subject = f"DAILY REPORT FOR JOGALIGA {self.repo.upper()} [{self.today.upper()}]"
        
        # Format all the text inputs into bullet points
        dev1_acc = self.format_bullet_points(dev1_accomplishments) if dev1_accomplishments else "None"
        dev2_acc = self.format_bullet_points(dev2_accomplishments) if dev2_accomplishments else "None"
        dev1_plan = self.format_bullet_points(dev1_plans) if dev1_plans else "None"
        dev2_plan = self.format_bullet_points(dev2_plans) if dev2_plans else "None"
        dev1_block = self.format_bullet_points(dev1_blockers) if dev1_blockers else "None"
        dev2_block = self.format_bullet_points(dev2_blockers) if dev2_blockers else "None"
        dev1_note = self.format_bullet_points(dev1_notes) if dev1_notes else "None"
        dev2_note = self.format_bullet_points(dev2_notes) if dev2_notes else "None"
        
        
        # Dynamically build HTML sections based on the number of developers
        dev_data = [
            {
                "name": self.developer[0],
                "acc": dev1_acc,
                "plan": dev1_plan,
                "block": dev1_block,
                "note": dev1_note,
            }
        ]

        # Include second developer only if present (backend)
        if len(self.developer) > 1:
            dev_data.append(
                {
                    "name": self.developer[1],
                    "acc": dev2_acc,
                    "plan": dev2_plan,
                    "block": dev2_block,
                    "note": dev2_note,
                }
            )

        def build_section(title: str, key: str) -> str:
            """Return an HTML section for the given title and key."""
            html = (
                f'<h2 style="color:#27a25a;font-size:25px;margin:0 0 3px 0;padding:0;">{title}</h2>'
            )
            for item in dev_data:
                html += (
                    f'<p style="margin:0 0 5px 0;font-size:18px"><b>{item["name"]}:</b></p>'
                )
                html += (
                    f'<p style="margin:0 0 10px 20px;font-size:16px">{item[key]}</p>'
                )
            return html

        accomplishments_html = build_section("Today's Accomplishments", "acc")
        plans_html = build_section("Tomorrow's Plan", "plan")
        blockers_html = build_section("Blockers & Questions", "block")
        notes_html = build_section("Notes", "note")

        # Assemble the whole email body
        body = f'''<table width="600" cellpadding="0" cellspacing="0" border="0" style="font-family:Arial,sans-serif;margin:0;padding:0;">
<tr><td bgcolor="#27a25a" style="color:#fff;padding:30px;border-radius:15px"><h1 style="margin:0;font-size:30px;">Jogaliga {self.repo.capitalize()} Daily Report</h1><p style="margin:10px 0 0 0;font-size:18px"><b>Developer{'s' if len(self.developer) > 1 else ''}:</b> {', '.join(self.developer)}<br><b>Date:</b> {self.today}</p></td></tr>
<tr><td bgcolor="#ffffff" style="padding:10px;">
{accomplishments_html}
{plans_html}
{blockers_html}
{notes_html}
</td></tr>
<tr><td bgcolor="#f9fafb" style="padding:15px;text-align:center;font-size:12px;color:#666;">This is an automated report generated by the Jogaliga {self.repo.capitalize()} team</td></tr>
</table>'''

        yag = yagmail.SMTP(self.sender, self.app_password)
        yag.send(self.receiver, subject, [body])
        print("Daily report sent successfully")




def main():

    dotenv.load_dotenv()

    MOCK_MODE = os.getenv("MOCK_MODE")

    if MOCK_MODE == "False":
        print("Mock mode is disabled")
    else:
        print("Mock mode is enabled")

    sender = os.getenv("SENDER_EMAIL")
    receiver = [os.getenv("RECEIVER_EMAIL") if MOCK_MODE == "False" else "rhelbiro@gmail.com"]
    app_password = os.getenv("GMAIL_APP_PASSWORD")

    isValidRepo = False
    while not isValidRepo:
        try:
            repo = input("Enter the repo[1: Frontend, 2: Backend]: ").lower()
            if repo == "1":
                repo = "frontend"  # No additional recipient for frontend
            elif repo == "2":
                repo = "backend"
                if MOCK_MODE == "False":
                    receiver.append(os.getenv("HANS_EMAIL"))
            else:
                raise ValueError("Invalid repo")
            isValidRepo = True
        except ValueError as e:
            print(e)
            isValidRepo = False

    mailer = DailyReportMailer(repo, sender, receiver, app_password)

    # Example usage:
    dev1_accomplishments = """
    Refactored all player profile implementation to use consistent player profile edit naming
    Added E2E tests for multi-role user flows
    Removed duplicate imports and unified provider aliases in player-role
    Addressed role management code quality improvements and created GitHub issues for fixes
    """

    """
    Frontend
    Refactored all player profile implementation to use consistent player profile edit naming
    Added E2E tests for multi-role user flows
    Removed duplicate imports and unified provider aliases in player-role
    Addressed role management code quality improvements and created GitHub issues for fixes
    
    """

    dev2_accomplishments ="""
    Removed certain tests for now, to be refactored for consistent coverage
    Submitted PR but closed for various issues
    """

    dev1_plans = """
    Update documentation on multi role management/request implementation
    Create standardized API error handling across codebase and apply to current implementation
    """

    """
    Frontend
    
    """

    dev2_plans = """
    Apply fixes to PR to finalize submission
    """

    dev1_blockers = """
    None
    """

    dev2_blockers = """
    None
    """

    dev1_notes = """
    None
    """

    dev2_notes = """
    None
    """

    mailer.send_report(dev1_accomplishments=dev1_accomplishments, dev2_accomplishments=dev2_accomplishments, dev1_plans=dev1_plans, dev2_plans=dev2_plans, dev1_blockers=dev1_blockers, dev2_blockers=dev2_blockers, dev1_notes=dev1_notes, dev2_notes=dev2_notes)


if __name__ == "__main__":
    main()

# .venv/Scripts/activate.ps1